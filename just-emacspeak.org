#+TITLE: Emacs init.el File
#+DATE: \today
#+AUTHOR: Tim Cross

* Load Path
The following adds additional directories to the emacs load-path so that
emacs can find various additional libraries etc

Any small third party libraries I use which are not packaged in an ELPA
repository go in the ~.emacs.d/lib~  subdirectory.

#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (expand-file-name "lib" user-emacs-directory))
#+END_SRC

* Set Some Constants
I set a couple of constants which can then be used to control configuration
settings in my init file.

I run emacs on both OSX and Linux. To handle differences in configuration
settings for the two platforms, I set a constant which determines if emacs is
running on OSX or not. 

#+BEGIN_SRC emacs-lisp
  (defconst *is-a-mac* (eq system-type 'darwin)
    "T if emacs is running under OSX, nil otherwise.")
#+END_SRC

Set a constant to determine if spell checking is to be enabled. Not sure if I
really need this, but leaving it in place for now.

#+BEGIN_SRC emacs-lisp
  (defconst *spell-check-support-enabled* t
    "T if we want spell checking support enabled, nil otherwise.")
#+END_SRC

* Custom 
#+BEGIN_SRC emacs-lisp
  (if *is-a-mac*
      (setq custom-file (expand-file-name "mac-custom.el" user-emacs-directory))
    (setq custom-file (expand-file-name "linux-custom.el" user-emacs-directory)))

  (when (file-exists-p custom-file)
    (load custom-file))
#+END_SRC

* ELPA
ELPA has made managing add-on elisp packages *much* easier than it use to
be. The trick is to only load packages you really want/need and not get carried
away loading lots of additional packages /just in case/.


First, we need to load package.el and then we need to add some additional
package repositories. I add

   - The Org repository so that I can use most recent org-plus-contrib package
   - The melpa repository

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-enable-at-startup nil
        package-archive-priorities '(("org" . 2) ("melpa" . 1) ("gnu" . 0)))

  (add-to-list 'package-archives `("melpa" . "https://melpa.org/packages/"))
  (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
  (package-initialize)

#+END_SRC

* Use Package
I just found John Wiegley's use-package macro, which I think is a really
convenient way to manage the installation and configuration of ELPA
packages. Therefore, I plan to migrate my configuration to use that package.

We have a slight bootstrap or /chicken and egg/ problem, we need the use-package
package from ELPA before we can use it, but it is what we want to use to install
the package. Therefore, need a simple light weight way to get that package. Lets
do the simple way

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-verbose nil)
  (eval-when-compile
    (require 'use-package))
  (require 'diminish)
  (require 'bind-key)
#+END_SRC
* Emacspeak

Now load Emacspeak. As Emacspeak makes extensive use of Emacs' =defacvice=
facility, it is important that it is loaded as early as possible in the Emacs
boot process.

First, setup a constant which tells emacs where to look for the emacspeak distro

#+BEGIN_SRC emacs-lisp 
  (defconst *emacspeak-src-dir* (expand-file-name "~/git/emacspeak/trunk")
    "Where emacs will find the emacspeak distro")
#+END_SRC

Need to load different speech servers depending on the platform

#+BEGIN_SRC emacs-lisp 
  (if *is-a-mac*
      (defconst *emacspeak-server* "mac")
    (defconst *emacspeak-server* "outloud"))
#+END_SRC

Add the EmacsSpeak info documentation to the info search path. From within Info,
you can hit ~g~ and then enter ~(emacspeak)~ at the prompt to open the Emacspeak
info documentation

#+BEGIN_SRC emacs-lisp 
  (require 'info)
  (add-to-list 'Info-additional-directory-list
               (expand-file-name "info"  *emacspeak-src-dir*))
#+END_SRC

Seems to be a couple of references to free variables which throw up bytecomp
warnings. Put some defvars in place to silence them.

#+BEGIN_SRC emacs-lisp
  (defvar emacspeak-we-url-executor nil)
  (defvar org-ans2 nil)
  (defvar ido-process-ignore-lists nil)
#+END_SRC

When emacs is not being run in batch mode and when emacspeak is not yet loaded,
then load it

#+BEGIN_SRC emacs-lisp 
  (when (and (not noninteractive)
             (not (featurep 'emacspeak)))
    (add-to-list 'load-path *emacspeak-src-dir*)
    (setenv "EMACSPEAK_DIR" *emacspeak-src-dir*)
    (setenv "DTK_PROGRAM" *emacspeak-server*)
    (setq dtk-program *emacspeak-server*
          dtk-use-tones nil
          emacspeak-auditory-icon-function 'emacspeak-soxplay-auditory-icon
          emacspeak-erc-my-nick "theophilusx"
          emacspeak-erc-speak-all-participants t
          emacspeak-mail-alert nil
          emacspeak-play-emacspeak-startup-icon nil
          emacspeak-play-program "/home/tcross/bin/play"
          emacspeak-play-args nil
          emacspeak-wizards-available-browsers (if *is-a-mac*
                                                   '(eww-browse-url browse-url-default-macosx-browser)
                                                 '(eww-browse-url browse-url-default-browser))
          emacspeak-vm-use-raman-settings nil
          mac-default-speech-rate 400        
          outloud-default-speech-rate 90
          sox-play (if *is-a-mac*
                       "/usr/local/bin/play"
                     "/usr/bin/play")
          emacspeak-soxplay-command (if *is-a-mac*
                                        "/usr/local/bin/play -v 1.2 %s earwax &"
                                      "/usr/bin/play -v 1.2 %s earwax &")
          tts-default-speech-rate 90)
    (add-hook 'emacspeak-startup-hook
              (lambda ()
                (dtk-set-rate tts-default-speech-rate 1)
                (dtk-interp-sync)
                (emacspeak-sounds-select-theme "3d/")))
    (load-file (concat *emacspeak-src-dir* "/lisp/emacspeak-setup.el")))
#+END_SRC

I like to set my own key bindings and there are a lot of emacspeak key bindings
I don't need/want. However, emacspeak does a key binding /refresh/ at the end of
the init process by adding some emacspeak setup functions to the
=after-init-hook=. This means we need to make our setup changes in this hook and
ensure our changes are added /after/ emacspeak hook functions run by appending
them.

#+BEGIN_SRC emacs-lisp
  (defhydra my-hydra-wizards ()
    "Emacspeak Wizards"
    ("c" emacspeak-wizards-byte-compile-current-buffer "Byte")
    ("b" emacspeak-wizards-cycle-browser "Browser")
    ("e" emacspeak-wizards-eww-buffer-list "eww")
    ("r" emacspeak-wizards-find-file-as-root "root")
    ("g" emacspeak-wizards-find-grep "Grep")
    ("f" emacspeak-wizards-finder-find "Find")
    ("F" emacspeak-wizards-generate-finder "Finder")
    ("!" emacspeak-wizards-shell-command-on-current-file "cmd")
    ("s" emacspeak-wizards-spot-words "Spot")
    ("t" emacspeak-wizards-tramp-open-location "Tramp")
    ("q" nil "Quit"))
  (defun my-esp-bindings ()
    (message "Loading my emacspeak key bindings...")
    (unbind-key "<S-left>")
    (unbind-key "<S-right>")
    (unbind-key "<C-left>")
    (unbind-key "<C-right>")
    (unbind-key "<C-down>")
    (unbind-key "<C-up>")
    (unbind-key "<S-up>")
    (unbind-key "<S-down>")
    (bind-key "<f5>" 'my-hydra-window/body)
    (bind-key "<f7>" 'my-hydra-wizards/body)
    (bind-key "C-z" 'my-hydra-zoom/body))


  (add-hook 'after-init-hook #'my-esp-bindings t)
#+END_SRC

 I've added a little of my own extensions/enhancements to Emacspeak. Once I feel
 they are mature enough, I will generally submit them for inclusion 

#+BEGIN_SRC emacs-lisp
  ;; Require my emacspeak-smartparens.el
  ;; (when (featurep 'emacspeak)
  ;;   (require 'emacspeak-smartparens))
#+END_SRC

* OSX Tweaks 
Some tweaks to make emacs and OSX get on better. Note that I also install the
coreutils package from homebrew to get some GNU flavoured utilities. These tend
to start with 'g', so we need to do some additional variable settings.

#+BEGIN_SRC emacs-lisp
  (when *is-a-mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none)
    (setq dired-free-space-program "gdf")
    (setq insert-directory-program "gls")
    (setq default-input-method "MacOSX")
    ;; Make mouse wheel / trackpad scrolling less jerky
    (setq mouse-wheel-scroll-amount '(1 ((shift) . 5)
                                        ((control))))
    (dolist (multiple '("" "double-" "triple-"))
      (dolist (direction '("right" "left"))
        (global-set-key (read-kbd-macro
                         (concat "<" multiple "wheel-" direction ">")) 'ignore)))
    (bind-key "M-'" 'ns-next-frame)
    (bind-key "M-h" 'ns-do-hide-emacs)
    (bind-key "M-`" 'ms-do-hide-others)
    (use-package applescript-mode
      :ensure t
      :mode ("\\.applescript" . applescript-mode))
    (use-package osx-plist
      :ensure t)
    (use-package osx-trash
      :ensure t
      :config (osx-trash-setup)))


#+END_SRC

* Basic defaults 
Some basic defaults and customizations 

** Disabled Features 
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode)
    (scroll-bar-mode -1))
  (when (fboundp 'horizontal-scroll-bar-mode)
    (horizontal-scroll-bar-mode -1))

#+END_SRC

** Zap up to char
#+BEGIN_SRC emacs-lisp
  (autoload 'zap-up-to-char "misc"
    "Kill up to, but not including ARGth occurrence of CHAR." t)

  (global-set-key (kbd "M-z") 'zap-up-to-char)  
#+END_SRC

** Enable some useful minor modes
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :demand t
    :init (setq uniquify-buffer-name-style 'forward))

  (use-package saveplace
    :demand t
    :init 
    (setq save-place-file (expand-file-name ".saveplace" user-emacs-directory))
    :config
    (save-place-mode 1))

  (use-package paren
    :demand t
    :config
    (show-paren-mode 1))

  (use-package delsel
    :demand
    :config
    (delete-selection-mode))

  (use-package autorevert
    :demand t
    :config
    (global-auto-revert-mode))

  (transient-mark-mode t)

  (when (fboundp 'global-prettify-symbols-mode)
    (global-prettify-symbols-mode))

  (fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC
  
** Enable some disabled modes
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

#+END_SRC

** Set some setq defaults
#+BEGIN_SRC emacs-lisp
  (setq apropos-do-all t
        auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc")
        backup-directory-alist `(("." . ,(concat user-emacs-directory
                                                 "backups")))
        blink-matching-paren nil
        default-frame-alist '((top . 1) (left . 1) (width . 81) (height . 29))
        delete-by-moving-to-trash t
        ediff-window-setup-function 'ediff-setup-windows-plain
        eldoc-idle-delay 1.5
        inhibit-startup-message t
        initial-fram-alist '((top . 1) (left . 1) (width . 81) (height . 29))
        line-move-visual nil
        load-prefer-newer t
       ;; max-mini-window-height 0.50
        message-log-max 2048
        mouse-yank-at-point t
        require-final-newline t
        save-interprogram-paste-before-kill t
        show-paren-delay 0
        show-paren-style 'expression
        truncate-lines t
        visible-bell t
        select-enable-clipboard t
        select-enable-primary t)
#+END_SRC

** Set some setq-defaults
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80
                indent-tabs-mode nil
                save-place t
                show-trailing-whitespace nil)
#+END_SRC

** Set some global key bindings
#+BEGIN_SRC emacs-lisp
  (bind-key "C-s" 'isearch-forward-regexp)
  (bind-key "C-r" 'isearch-backward-regexp)
  (bind-key "C-M-s" 'isearch-forward)
  (bind-key "C-M-r" 'isearch-backward)
#+END_SRC

** Coding System
#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (when (display-graphic-p)
    (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC

* Fonts
Set the default font

#+BEGIN_SRC emacs-lisp
  (if *is-a-mac*
      (set-face-attribute 'default nil
                          :foundry nil
                          :family "Inconsolata"
                          :height 320)
    (set-face-attribute 'default nil
                        :foundry nil
                        :family "Inconsolata"
                        :height 180))
#+END_SRC

Setup some font scaling support

#+BEGIN_SRC emacs-lisp
  (use-package default-text-scale
    :ensure t
    :config
    (bind-key "C-M-=" 'default-text-scale-increase)
    (bind-key "C-M--" 'default-text-scale-decrease))
#+END_SRC

* Theme 
#+BEGIN_SRC emacs-lisp
  (use-package solarized-theme
    :ensure t
    :init 
    (setq-default custom-enabled-themes '(solarized-dark))
    (setq solarized-distinct-fringe-background +1)
    (setq solarized-use-more-italic t)
    :config
    (defun reapply-themes ()
      "Forcibly load the themes listed in `custom-enabled-themes'."
      (dolist (theme custom-enabled-themes)
        (unless (custom-theme-p theme)
          (load-theme theme)))
      (custom-set-variables `(custom-enabled-themes
                              (quote ,custom-enabled-themes))))
    (add-hook 'after-init-hook 'reapply-themes))

#+END_SRC

** Diminish Mode
The ~diminish~ package allows us to remove or change minor mode entries in the
mode-line. See [[https://github.com/myrjola/diminish.el][diminish on GitHub]]

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :config
    (progn 
      (diminish 'voice-lock-mode)
      (diminish 'auto-fill-function)
      (diminish 'hs-minor-mode)
      (diminish 'doc-view-minor-mode " DV")
      (diminish 'view-mode " RO")
      ;; (diminish 'elisp-slime-nav-mode)
      (diminish 'yas-minor-mode)
      ;; (diminish 'paredit-everywhere-mode " Par")
      ;; (diminish 'paredit-mode " Par")
      (diminish 'rainbow-mode "")
      (diminish 'company-mode)
      (diminish 'global-whitespace-newline-mode)
      (diminish 'global-whitespace-mode)
      (diminish 'whitespace-newline-mode)
      (diminish 'whitespace-mode)
      (diminish 'guide-key-mode)))

#+END_SRC

** Mode Line
#+BEGIN_SRC emacs-lisp
  ;; (use-package powerline
  ;;   :ensure t
  ;;   :init
  ;;   (setq powerline-display-mule-info nil
  ;;         powerline-display-buffer-size nil)
  ;;   :config
  ;;   (powerline-default-theme))

#+END_SRC


